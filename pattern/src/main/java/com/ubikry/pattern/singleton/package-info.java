package com.ubikry.pattern.singleton;


/**
 * Java 单例学习
 *  饿汗式单例：
 *      在类加载时创建对象
 *  懒汉式单例
 *      在使用时创建对象，节约内存空间
 *      实现方式：
 *          1.在获得实例的方法上加锁
 *              优点：实现简单
 *              缺点：频繁的获得锁效率不高
 *          2.使用双重检查锁来实现
 *              优点：只有在创建对象是加锁，效率更高
 *              缺点：依然需要判断
 *          3.使用内部类来实现
 *              优点：利用java类加载的机制来实现对象的延时初始化，没有锁，效率很高
 *              缺点：
 *  注册式单例：
 *      1.容器
 *          将单例对象注册进容器中，使用时从容器中获取。
 *      2.枚举
 *          反射源码：对枚举做了提出。不可用反射来创建实例
 *          利用 枚举名+枚举变量 将单例对象注册进jvm中
 *
 * 什么时候会破坏单例？
 * 1. 反射
 *  应对方法：在构造类中判断对象是否创建如已创建则抛出异常，禁止创建
 *  2. 反序列化
 *   应对方法：在类中增加无参的readResolve()方法。因为反序列化时，会判断有没有此方法，有的话会使用此方法返回
 *   的对象来覆盖已经被序列化好的方法。
 *
 *
 *
 */